@import './variables';







$base-font-size: 16px; // Set your base font size in pixels

// Write a property in rem
@mixin rem($property, $value) {
  // #{$property}: ($value / $base-font-size) * 1rem;
  $quotient: calc($value / $base-font-size);
  #{$property}: $quotient * 1rem;
}

@mixin color($colorVal) {
  color: map-get($colors, $colorVal);
}

@mixin colorIm($colorVal) {
  color: map-get($colors, $colorVal) !important;
}

@mixin bgColor($colorVal) {
  background-color: map-get($colors, $colorVal);
}

@mixin bgColorImp($colorVal) {
  background-color: map-get($colors, $colorVal) !important;
}



@mixin centerAbsElt($width) {
  margin-left: 50%;
  left: calc(-#{$width} / 2);
}





/**
 * Media queries 
 * ------------------------------------
*/

// Define a mixin for a media query with a specified breakpoint
@mixin respond-to($breakpoint) {
  @media only screen and (min-width: $breakpoint) {
    @content;
  }
}

@mixin before-to($breakpoint) {
  @media only screen and (max-width: $breakpoint) {
    @content;
  }
}


/**
 * General Layout
 * ------------------------------------
*/
@mixin set-app-background-color() {
  @include bgColor(primary-200);
}

@mixin gobalBorderRadius($type: 'large') {
  @if ($type =='large') {
    @include rem(border-radius, 20px);
  }

  @else if ($type =='medium') {
    @include rem(border-radius, 10px);
  }

  @else if ($type =='small') {
    @include rem(border-radius, 5px);
  }
}


$spacer-sm: map-get($gap, spacer-sm);
$spacer-md: map-get($gap, spacer-md);
$spacer-lg: map-get($gap, spacer-lg);
$spacer-xl: map-get($gap, spacer-xl);

@mixin gobalBottomSpacing($spacer: $spacer-sm) {
  @include rem(margin-bottom, $spacer);
}


/**
 * Typography
 * ------------------------------------
*/
@mixin typo-h1() {
  color: aquamarine !important;
  // font-size: clamp(2rem, 1.5rem + 1.5vw, 3.375rem);
  // font-weight: 500;
}

@mixin typo-h2($size) {
  color: blueviolet !important;
  // font-size: clamp(1.313rem, 1.1rem + 1.1vw, 2.813rem);
  // font-weight: 400;
}

@mixin typo-h3($size) {
 
  // font-size: clamp(1.313rem, 0.8rem + 0.8vw, 2.813rem);
  // font-weight: 400;

  color: coral !important;

  a {
    color: coral !important;
  }
}

@mixin typo-h4($size) {


  color: darkgoldenrod !important;

  font-size: 24px;
  line-height: 26px;
  font-weight: 500;
}

 
 

@mixin typo-logo() {
  font-size: 16px;
  line-height: 16px;
  font-weight: 900;
}

@mixin typo-navLink() {
  font-size: 16px;
  line-height: 16px;
  font-weight: 600;
}

@mixin typo-buttonLink() {
  font-size: 16px;
  line-height: 16px;
  font-weight: 700;
}

@mixin typo-titleCaption($transform: null) {
  font-size: 15px;
  line-height: 20px;
  font-weight: 500;

  @if $transform !=null {
    text-transform: $transform;
  }

}

@mixin typo-caption1() {
  font-weight: 400;
  font-size: 14px;
  line-height: 16px;
}





@mixin type-caption() {
  font-size: 12px;
  line-height: 16px;
  font-weight: 500;
}


@mixin setFontFamily($type) {
  // @if ($type =='heading') {
  //   font-family: 'Kanit', sans-serif;
  // }

  // @else {
  //   font-family: 'Montserrat', sans-serif;
  // }
}


@mixin limit-text() {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}